## Exercise 1

# Define a function that takes in input a vector of
# strings and returns the number of strings that
# contains any of the characters "a","e","u".
# – Use only functions we have previously seen
# – Which is the result applied to c("area","ARE","sir","E","a")

inputVector <- c("area","ARE","sir","E","a")

myFunction <- function(input)
{
   idx <- grep("a|e|u",input,ignore.case = TRUE)
   return(length(idx))
}

myFunction(inputVector)


## Exercise 2

# Write a R function to rotate a given matrix 90 degree clockwise rotation

m <- matrix(1:9,3)
print(m)

rotate <- t(apply(m,2,rev))
print(rotate)


## Exercise 3

# Write a double for loop which prints 30 numbers (1:10, 2:11, 3:12).
# Those are three clusters of ten numbers each.
# The first loop determines the number of clusters (3) via its length;
# the second loop the numbers to be printed (1 to 10 at the beginning).
# Each cluster starts one number higher than the previous one.

vec <- c()
for(i in 1:3)
{
   for(j in 1:10)
   {
      vec <- c(vec,j+i-1)
   }
}
print(vec)


## Exercise 4

# Get a histogram of the ‘mpg’ values of ‘mtcars’.
# Which bin contains the most observations?
# Are there more automatic (0) or manual (1) transmission-type cars in the
# dataset?
# Get a scatter plot of ‘hp’ vs ‘weight’ and measure variable correlation.

head(mtcars)

hist(mtcars$mpg,breaks=20)

sum(mtcars$am==1)
sum(mtcars$am==0)

plot(mtcars$hp,mtcars$wt)
plot(mtcars$hp,mtcars$wt,main="scatterplot",xlab="Gross horsepower",ylab="Weight (1000 lbs)",
     col="red",pch=19)

cor.test(mtcars$hp,mtcars$wt)


## Exercise 5

# Write a function called “drawRegressionLine()” for drawing a regression line through a scatter plot.
# This function should be specified as follows:
# input:
#   x = a numeric vector specifying the x-coordinates of the scatter plot
#   y = a numeric vector specifying the y-coordinates of the scatter plot
# suggested algorithm:
#   with the x and y coordinates, first produce a scatterplot
#     (HINT: use the “plot()” function)
#   use the “lm()” function to regress the y variable on the x variable.
#   record the intercept and slope of the linear relationship between x and y
#     (HINT: use the “coef()” function)
#   add a regression line to the scatter plot (HINT: use the “abline()” function)
# return:
#   coefs = a vector of length 2, storing the intercept and slope of the linear relationship
#
# Apply this function to the ‘Height’ (x axis) and ‘Volume’ (y axis) vectors in the ‘trees’ dataset
# and then to the ‘waiting’ (x axis) and ‘eruptions’ (y axis) vectors in the ‘faithful’ dataset.


drawRegressionLine <- function(x,y)
{
   plot(x,y,main="scatteplot",xlab="Variable X",ylab="Variable Y",pch=19,col="blue")
   linearModel <- lm(y~x)
   coefficients <- coef(linearModel)
   abline(coefficients[1],coefficients[2])
   return(coefficients)
}   
   

drawRegressionLine(trees$Height,trees$Volume)
drawRegressionLine(faithful$waiting,faithful$eruptions)




































